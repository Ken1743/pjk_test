# PJM System

React (applicant/admin) + Flask (backend) のシステムです。  
Docker + docker-compose でローカル開発環境を統一し、  
本番は **Cloud Run (backend)** + **Firebase Hosting (frontend)** で運用します。

---

## 📂 ディレクトリ構成

pjm-system/
├── README.md
├── backend/ # Flask API
│ ├── Dockerfile
│ ├── app.py
│ └── requirements.txt
├── frontend/
│ ├── applicant/ # React (求職者向け)
│ │ ├── Dockerfile
│ │ ├── package.json
│ │ ├── src/App.js
│ │ └── ...
│ └── admin/ # React (管理者向け)
│ ├── Dockerfile
│ ├── package.json
│ ├── src/App.js
│ └── ...
├── infra/
│ ├── docker-compose.yml
│ └── .env.example
└── .gitignore

yaml
---

## 🚀 セットアップ手順

### 1. リポジトリを clone
```bash
git clone https://github.com/xxx/pjm-system.git
cd pjm-system
2. 環境変数ファイルを用意
.env は GitHub には含まれません。
サンプルからコピーして作成してください：

bash
cp infra/.env.example infra/.env
infra/.env.example の例:

env
REACT_APP_API_URL=http://backend:8080
FLASK_ENV=development
SECRET_KEY=change_me

3. Docker 環境を起動
bash
cd infra
docker compose up --build
サービス一覧：
Backend (Flask API) → http://localhost:8080/api/hello
Applicant Frontend → http://localhost:3000
Admin Frontend → http://localhost:3001

4. Backend 単体での起動（デバッグ用）
bash
cd backend
pip install -r requirements.txt
flask run --host=0.0.0.0 --port=8080

5. Frontend 単体での起動（デバッグ用）
applicant
bash
cd frontend/applicant
npm install
npm start
→ http://localhost:3000

admin
bash
cd frontend/admin
npm install
npm start
→ http://localhost:3001

✅ 動作確認チェックリスト
http://localhost:8080/api/hello にアクセスすると：

json
{"message": "Hello from Flask API!"}
Applicant/Admin の画面に

csharp
Backend says: Hello from Flask API!
と表示される

🛑 .gitignore ポイント
node_modules/ は Git に含めません

各メンバーは npm install で再生成してください
cd frontend/applicant
npm install

.env は Git に含めません

代わりに .env.example をコミットし、各自コピーして使用

📦 今後の運用
開発: docker compose up で統一環境

本番:

Backend → Cloud Run (Docker image)

Frontend → Firebase Hosting (サブドメイン分け: applicant/admin)

CI/CD: GitHub Actions で自動デプロイ予定


確認方法

1. Docker イメージがビルドされるか
bash
cd infra
docker compose build


2. サービスが起動できるか
docker compose up
ログにエラーが出ていないこと

backend-1, applicant-1, admin-1 が立ち上がっていること

3. Backend API の動作確認
ブラウザまたは curl で確認：
curl http://localhost:8080/api/hello
期待されるレスポンス：
{"message":"Hello from Flask API!"}

4. Applicant Frontend の確認
http://localhost:3000
 にアクセス
表示内容：
Applicant Frontend
Backend says: Hello from Flask API!

######################################################################
######################################################################
######################################################################


本番構成の全体像

Backend (Flask)

デプロイ先：Cloud Run

デプロイ方法：Docker イメージをビルドして Artifact Registry に push → Cloud Run に deploy

Frontend (applicant / admin, React)

デプロイ先：Firebase Hosting

デプロイ方法：npm run build で静的ファイルを生成 → Firebase CLI で deploy

サブドメインを分けるのが理想例

applicant → https://applicant.example.com

admin → https://admin.example.com

🐍 Backend (Flask → Cloud Run)
1. GCP プロジェクト準備
gcloud auth login
gcloud config set project <YOUR_PROJECT_ID>
gcloud services enable run.googleapis.com artifactregistry.googleapis.com cloudbuild.googleapis.com

#プロジェクトを確認・切り替え
gcloud config list
gcloud config set project ringed-trail-472801-j4
gcloud config set compute/region asia-northeast1
gcloud config set compute/zone asia-northeast1-b

2. Artifact Registry を作成
gcloud artifacts repositories create <NAME>-repo \
  --repository-format=docker \
  --location=asia-northeast1 \
  --description="<NAME> container images"

3. Docker イメージをビルド & push
cd backend
gcloud builds submit --tag asia-northeast1-docker.pkg.dev/<YOUR_PROJECT_ID>/<NAME>/<NAME>-backend:latest .

4. Cloud Run にデプロイ
gcloud run deploy pjm-backend \
  --image asia-northeast1-docker.pkg.dev/<YOUR_PROJECT_ID>/<Name>-repo/<Name>-backend:latest \
  --platform managed \
  --region asia-northeast1 \
  --allow-unauthenticated


👉 成功すると https://pjm-backend-xxxxx-asia-northeast1.run.app が発行されます。
これを React 側の .env.production に書きます。
React フロントエンドと接続
frontend/applicant/.env.production
frontend/admin/.env.production
に以下を記入：
REACT_APP_API_URL=https://pjm-backend-xxxxx-asia-northeast1.run.app


Firebase Hosting セットアップ手順
1. Firebase プロジェクトを作成

Firebase Console
 → 「プロジェクトを追加」

名前例: pjk-frontend

Google Analytics は任意

👉 作成すると GCP プロジェクトと紐づきます（例: pjk-test-fcc32）

2. Firebase CLI の準備
npm install -g firebase-tools
firebase login
firebase projects:list   # プロジェクト確認
firebase use <PROJECT_ID>   # プロジェクト切り替え

3. Firebase Hosting サイトを作成

Hosting のサイト ID は グローバルで一意 が必要なので、以下のようにする：

firebase hosting:sites:create pjk-applicant
firebase hosting:sites:create pjk-admin


👉 これで applicant/admin 用の2つの Hosting サイトが作成される

4. ターゲットを割り当て

作成したサイトとローカル設定を紐付ける：

firebase target:clear hosting applicant   # 念のためリセット
firebase target:apply hosting applicant pjk-applicant
firebase target:apply hosting admin pjk-admin

5. firebase.json を編集

プロジェクトルートに以下を配置：

{
  "hosting": [
    {
      "target": "applicant",
      "public": "frontend/applicant/build",
      "ignore": ["firebase.json", "**/.*", "**/node_modules/**"]
    },
    {
      "target": "admin",
      "public": "frontend/admin/build",
      "ignore": ["firebase.json", "**/.*", "**/node_modules/**"]
    }
  ]
}

6. React アプリのビルド
cd frontend/applicant
npm run build

cd ../admin
npm run build


👉 build/ フォルダが生成される

7. デプロイ
firebase deploy --only hosting:applicant
firebase deploy --only hosting:admin

8. 確認

applicant → https://pjk-applicant.web.app

admin → https://pjk-admin.web.app

両方で

Backend says: Hello from Flask API!


が表示されれば成功 🎉

9. Backend 接続設定

frontend/applicant/.env.production
frontend/admin/.env.production

REACT_APP_API_URL=https://backend-xxxx.asia-northeast1.run.app


👉 これで本番環境の React から Cloud Run API にアクセスできる

✅ まとめ

Cloud Run = Flask backend

Firebase Hosting = applicant/admin React frontend

両者を .env.production 経由で接続

最終的に applicant/admin サイトから backend API を叩けるようになる




📄 本番デプロイ手順書
🚀 構成概要

Backend (Flask API) → Google Cloud Run

Frontend (React applicant/admin) → Firebase Hosting

接続 → React 環境変数 (REACT_APP_API_URL) で Cloud Run のエンドポイントを指定

1. GCP (Backend: Flask → Cloud Run)
1.1 プロジェクトを選択
gcloud config set project ringed-trail-472801-j4
gcloud config set compute/region asia-northeast1
gcloud config set compute/zone asia-northeast1-b

1.2 Artifact Registry の作成
gcloud artifacts repositories create backend-repo \
  --repository-format=docker \
  --location=asia-northeast1 \
  --description="Backend container images"

1.3 Docker イメージのビルド & push
cd backend
gcloud builds submit \
  --tag asia-northeast1-docker.pkg.dev/ringed-trail-472801-j4/backend-repo/backend:latest .

1.4 Cloud Run にデプロイ
gcloud run deploy backend \
  --image asia-northeast1-docker.pkg.dev/ringed-trail-472801-j4/backend-repo/backend:latest \
  --platform managed \
  --region asia-northeast1 \
  --allow-unauthenticated


👉 デプロイ成功後、URL が発行される
例:

https://backend-xxxx-asia-northeast1.run.app

1.5 動作確認
curl https://backend-xxxx-asia-northeast1.run.app/api/hello


期待されるレスポンス：

{"message":"Hello from Flask API!"}

2. Firebase (Frontend: React → Hosting)
2.1 Firebase プロジェクトを作成

Firebase Console → 新規プロジェクト

例: pjk-frontend

Google Analytics は任意

2.2 Firebase CLI 設定
npm install -g firebase-tools
firebase login
firebase projects:list
firebase use <PROJECT_ID>

2.3 Hosting サイトを作成

シンプルな名前は予約されているのでユニークに：

firebase hosting:sites:create pjk-applicant
firebase hosting:sites:create pjk-admin

2.4 ターゲットを割り当て
firebase target:clear hosting applicant
firebase target:apply hosting applicant pjk-applicant
firebase target:apply hosting admin pjk-admin

2.5 firebase.json 設定

ルートに配置：

{
  "hosting": [
    {
      "target": "applicant",
      "public": "frontend/applicant/build",
      "ignore": ["firebase.json", "**/.*", "**/node_modules/**"]
    },
    {
      "target": "admin",
      "public": "frontend/admin/build",
      "ignore": ["firebase.json", "**/.*", "**/node_modules/**"]
    }
  ]
}

2.6 React をビルド
cd frontend/applicant
npm run build

cd ../admin
npm run build

2.7 デプロイ
firebase deploy --only hosting:applicant
firebase deploy --only hosting:admin


👉 デプロイ成功後の URL

applicant → https://pjk-applicant.web.app

admin → https://pjk-admin.web.app

3. Backend と Frontend の接続
3.1 環境変数設定

frontend/applicant/.env.production
frontend/admin/.env.production

REACT_APP_API_URL=https://backend-xxxx-asia-northeast1.run.app

3.2 確認

本番の applicant/admin サイトで

Backend says: Hello from Flask API!


と表示されれば接続完了 ✅

4. 運用上の注意

.env.production は Git 管理しないこと（.env.example を共有）

デプロイのたびに React を再ビルド (npm run build) する必要あり

不要になった Cloud Run サービスや Artifact Registry のリポジトリは削除して整理可能

✅ ゴール

Backend (Cloud Run) と Frontend (Firebase Hosting) が接続済み

applicant/admin それぞれが独自 URL で公開

本番環境で利用可能な状態